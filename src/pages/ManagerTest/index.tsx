export default function ManagerTest() {
    return (
        <div className="wrapper">
            <div className="des">
                这个管理系统我本来是想写的, 目前也已经将整个无限加载的全局通用组件写好了, 在components/PullLoadMore中, 但是到此刻已经是7点多了, 我有些其他事需要处理， 而且精力也有限了, 可以看到我在写PullLoadMore的时候对于ts都是无限用any了
                我大概算了一下 写这个管理系统起码还得3个小时,故而直接放弃, 但是我可以简单说一下我的思路:
                <p>1. 封装好的PullLoadMore组件会自动监听鼠标滚动事件, 每次滚动到底部的时候如果还有数据, 会提示用户去重新拉取, 这里我做的是让用户主动去拉取, 是自己想做的性能优化之一, 当然如果不需要这一步, 直接把用户点击的回调绑定到scroll的滚动事件即可, 只需要改一点代码</p>
                <p>2. 第二个点就是当数据量大的时候我打算采用长列表优化来确保页面中始终只会渲染二十条数据, 而用户在无限滚动的过程中我会从redux里取出对应的数据进行轮换, 具体可以去看一下长列表优化的流程, 他专门就是为了解决这个而生的</p>
                <p>3. 开始的那个布局其实就是一个非常简单的两栏布局, flex几行代码搞定, 然后左侧的哪个菜单栏的话 我相信能够写出树形组件, 那个菜单栏是小意思</p>
                <p>4. 至于说的分组, 也很容易使用个reduce函数 进行一个数据处理就好了, 分成不同的组别在进行渲染</p>


                {/* <p</p> */}
                <p style={{ color: "darkblue", marginTop: 50, fontWeight: "bold" }}>这三个需求都不是很难, 但是细节有很多, 无论是全局提示框还是树形组件都有很多待优化的地方,但是由于时间问题, 我没有花过多精力去处理这个, 所以有些地方可能会有纰漏, 如果有疑问, 可以继续邮件或者通过其他方式联系我, 我会将具体问题的具体解决思路提供出来, 最后, 感谢给的这次笔试机会Thanks♪(･ω･)ﾉ, 希望代码写的不是太烂, 想写的太多了, 写全局信息弹窗的时候本来想用react ddd的自定义hook去写, 中间思考了很多最终还是决定面向对象, 🤖🤖</p>
            </div>
        </div>
    )
}